Return-Path: <linux-usb+bounces-2088-lists+linux-usb=lfdr.de@vger.kernel.org>
X-Original-To: lists+linux-usb@lfdr.de
Delivered-To: lists+linux-usb@lfdr.de
Received: from sy.mirrors.kernel.org (sy.mirrors.kernel.org [147.75.48.161])
	by mail.lfdr.de (Postfix) with ESMTPS id D05117D3FEB
	for <lists+linux-usb@lfdr.de>; Mon, 23 Oct 2023 21:12:04 +0200 (CEST)
Received: from smtp.subspace.kernel.org (wormhole.subspace.kernel.org [52.25.139.140])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by sy.mirrors.kernel.org (Postfix) with ESMTPS id 60162B20DA3
	for <lists+linux-usb@lfdr.de>; Mon, 23 Oct 2023 19:12:02 +0000 (UTC)
Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id 3332D22336;
	Mon, 23 Oct 2023 19:11:57 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; dkim=none
X-Original-To: linux-usb@vger.kernel.org
Received: from lindbergh.monkeyblade.net (lindbergh.monkeyblade.net [23.128.96.19])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id 627311BDE7
	for <linux-usb@vger.kernel.org>; Mon, 23 Oct 2023 19:11:54 +0000 (UTC)
Received: from netrider.rowland.org (netrider.rowland.org [192.131.102.5])
	by lindbergh.monkeyblade.net (Postfix) with SMTP id B138C100
	for <linux-usb@vger.kernel.org>; Mon, 23 Oct 2023 12:11:50 -0700 (PDT)
Received: (qmail 432947 invoked by uid 1000); 23 Oct 2023 15:11:49 -0400
Date: Mon, 23 Oct 2023 15:11:49 -0400
From: Alan Stern <stern@rowland.harvard.edu>
To: Meng Li <Meng.Li@windriver.com>
Cc: gregkh@linuxfoundation.org, linux-usb@vger.kernel.org,
  usb-storage@lists.one-eyed-alien.net, linux-kernel@vger.kernel.org
Subject: Re: [PATCH] usb: storage: add shutdown function for usb storage
 driver
Message-ID: <33bd0779-bfe7-4c87-8fe6-ea8455df3b6b@rowland.harvard.edu>
References: <20231023054111.2744872-1-Meng.Li@windriver.com>
Precedence: bulk
X-Mailing-List: linux-usb@vger.kernel.org
List-Id: <linux-usb.vger.kernel.org>
List-Subscribe: <mailto:linux-usb+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-usb+unsubscribe@vger.kernel.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20231023054111.2744872-1-Meng.Li@windriver.com>

On Mon, Oct 23, 2023 at 01:41:11PM +0800, Meng Li wrote:
> On ls1043/ls1046 rdb platform, if a PCIe-USB host controller is installed, and
> an USB disk is also installed on the PCIe card, when executing "reboot -f" to
> reset the board, there will be below error reported:
> usb 2-2: device not accepting address 2, error -108

Do you mean that this error occurs after the system has rebooted?  Or do 
you mean that the error is reported while the reboot is taking place?

That "device not accepting address" error message is generated by the 
USB core, not by the usb-storage driver.  How will changing usb-storage 
help fix the problem?

> This issue is introduced by linux-yocto commit 837547b64a34("driver: net:
> dpaa: release resource when executing kexec") that cause to spend more
> time on shutdown operation. So, the 2 platforms with DPAA are not reset
> immediately after executing force reboot command. Moreover, the usb-storage
> thread is still in active status, there is still control data transferred between
> USB disk and PCIe host controller. But now the shutdown callback of usb pci driver
> had been invoked to stop the PCIe host controller completely. In this situation,
> the data transferring failed and report error.

That's _supposed_ to happen.  By design, the "reboot -f" command is 
meant to carry out an immediate reboot, without using the init system, 
unmounting filesystems, or doing other cleanup operations.

If you want a clean reboot with no errors, don't use the "-f" option.

>  Therefore, add shutdown function
> used to disconnect the usb mass storage device to avoid data transferring under
> the stopped status of PCIe device.

I don't see how this will fix the problems associated with a forced 
reboot.  How is preventing data from being transferred any better than 
getting an error when you do try to transfer it?

> Signed-off-by: Meng Li <Meng.Li@windriver.com>
> ---
>  drivers/usb/storage/usb.c | 10 ++++++++++
>  1 file changed, 10 insertions(+)
> 
> diff --git a/drivers/usb/storage/usb.c b/drivers/usb/storage/usb.c
> index ed7c6ad96a74..e076d7e3784f 100644
> --- a/drivers/usb/storage/usb.c
> +++ b/drivers/usb/storage/usb.c
> @@ -1142,6 +1142,15 @@ static int storage_probe(struct usb_interface *intf,
>  	return result;
>  }
>  
> +static void usb_stor_shutdown(struct device *dev)
> +{
> +	struct usb_driver *driver = to_usb_driver(dev->driver);
> +	struct usb_interface *intf = to_usb_interface(dev);
> +
> +	if (driver->disconnect)
> +		driver->disconnect(intf);
> +}
> +
>  static struct usb_driver usb_storage_driver = {
>  	.name =		DRV_NAME,
>  	.probe =	storage_probe,
> @@ -1151,6 +1160,7 @@ static struct usb_driver usb_storage_driver = {
>  	.reset_resume =	usb_stor_reset_resume,
>  	.pre_reset =	usb_stor_pre_reset,
>  	.post_reset =	usb_stor_post_reset,
> +	.drvwrap.driver.shutdown = usb_stor_shutdown,

This definitely looks like a layering violation.  If devices are to be 
disconnected during a system shutdown, the USB core should take care of 
it.  Not the individual device drivers.

What will happen if you make this change to usb-storage?  In a little 
while you'll want to do the same thing to the uas driver.  And then the 
usbhid driver.  And the usb serial drivers.  And so on...

This does not seem like the best solution to whatever problem you want 
to solve.

>  	.id_table =	usb_storage_usb_ids,
>  	.supports_autosuspend = 1,
>  	.soft_unbind =	1,

Alan Stern

